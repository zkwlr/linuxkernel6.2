	// ktime_t boottime = ktime_get_boottime();
	// unsigned long bootimems = ktime_to_ms(boottime);
	// unsigned long run_time = current_start_time_ms - bootimems;
	// // 현재 cpu의 rq에서 실행되는 task 디스크립터를 저장
	// struct task_struct *task;
	// task = get_current();
	// const char *task_name1 = task->comm;
	
	// hw1
	//schedule_info_list[sched_index].cpu = cpu;
	//strncpy(schedule_info_list[sched_index].task_name1, task_name1, TASK_COMM_LEN);
	// schedule_info_list[sched_index].task_name = task->comm;
	//schedule_info_list[sched_index].pid = task->pid;
	//schedule_info_list[sched_index].prio = task->prio;
	// schedule_info_list[sched_index].runtime = task_time;
	// schedule_info_list[sched_index].sched_type = task->sched_class->name;
	// hw1
	
	    /*test code
    struct task_struct *p;
        p = get_current();   // 현재 프로세스를 얻는다

        // 자식과 부모의 pid, state, comm 을 얻는다
        seq_printf(s, "[Kernel Message] : Currnet Process\n");
        seq_printf(s, "pid = %d\n", p->pid); 
        seq_printf(s, "comm = %s\n", p->comm);
        seq_printf(s, "priority = %d\n", p->prio);  
        struct task_struct *pa;
        pa = p->real_parent;   // 현재 프로세스가 가르키는 부모 프로세스를 얻는다

        seq_printf(s, "[Kernel Message] : Parent Process\n");
        seq_printf(s, "pid = %d\n", pa->pid); 
        seq_printf(s, "comm = %s\n", pa->comm);
        seq_printf(s, "priority = %d\n", pa->prio);
    */    
